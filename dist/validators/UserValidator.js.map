{"version":3,"sources":["../../src/validators/UserValidator.js"],"names":["postReqValidator","Joi","object","keys","username","string","required","password","name","first_name","middle_name","last_name","gender","valid","dateOfBirth","address","department","position","signature","validateUsers","req","res","next","err","validate","body","abortEarly","error","status","send","errors","details","map","x","message","validateQueryString","query","Error"],"mappings":"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","file":"UserValidator.js","sourcesContent":["import Joi from 'joi'\n\nconst postReqValidator = Joi.object().keys({\n    username: Joi.string().required(),\n    password: Joi.string().required(),\n    name: {\n        first_name : Joi.string().required(),\n        middle_name : Joi.string().required(),\n        last_name : Joi.string().required()\n    },\n    gender: Joi.string().valid('male', 'female').required(),\n    dateOfBirth: Joi.string().required(),\n    address: Joi.string().required(),\n    department: Joi.string().required(),\n    position: Joi.string().required(),\n    signature: Joi.string().required()\n})\n\n\nexport const validateUsers =(req, res, next)=> {\n    let err = Joi.validate(req.body, postReqValidator, {abortEarly: false} )\n    // {errors: (err.error.details).map(x => x.message) }\n    err.error !== null ? res.status(422).send({errors: (err.error.details).map(x => x.message) }) : next()\n}//@end\n\n\nexport const validateQueryString =(req, res, next)=> {\n    //checking query strings, all are not required\n    if(req.query.gender){\n        const err = Joi.validate(req.query.gender, Joi.string().valid('male', 'female').error(Error(\"gender must be either male or female only\")) )\n        err.error !== null ? res.status(422).send({errors: err.error.message }) : next()\n    }\n    else if(req.query.name){\n        const err = Joi.validate(req.query.name, Joi.string())\n        err.error !== null ? res.status(422).send({errors: err.error.message }) : next()\n    }\n   else if(req.query.status){\n        const err = Joi.validate(req.query.status, Joi.string().valid('y', 'n').error(Error(\"status must be either y(true) or n(false) only\")) )\n        err.error !== null ? res.status(422).send({errors: err.error.message }) : next()\n    }else{\n        next()\n    }\n\n}//@end\n"]}