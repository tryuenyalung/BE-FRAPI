{"version":3,"sources":["../../src/services/GridFsStream.js"],"names":["mlab","keys","USERS_DB","conn","mongoose","createConnection","gfs","once","db","mongo","fileExtList","FILE_EXT_LIST","getExtForBucket","fileExt","bucket","findOne","req","res","path","extname","params","filename","fileName","collection","files","err","file","readstream","createReadStream","on","status","send","FILE_ERR_MSG","pipe","findAll","fileOwner","metadata","owner","find","toArray","json"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAGA,IAAMA,OAAOC,eAAKC,QAAlB;AACA,IAAMC,OAAOC,mBAASC,gBAAT,CAA0BL,IAA1B,CAAb;AACA,IAAIM,YAAJ;;AAGAH,KAAKI,IAAL,CAAU,MAAV,EAAkB,YAAM;AACpBD,UAAM,4BAAKH,KAAKK,EAAV,EAAcJ,mBAASK,KAAvB,CAAN;AACH,CAFD;;AAIA;AACA,IAAMC,cAAcT,eAAKU,aAAzB;;AAEA;AACA,IAAIC,kBAAiB,SAAjBA,eAAiB,CAACC,OAAD,EAAY;AAC/B,QAAIC,SAASJ,YAAYG,OAAZ,CAAb;AACA,WAAOC,SAASA,MAAT,GAAkB,SAAzB;AACD,CAHD;;AAMO,IAAMC,4BAAS,SAATA,OAAS,CAACC,GAAD,EAAKC,GAAL,EAAW;;AAE7B,QAAMJ,UAAUK,eAAKC,OAAL,CAAaH,IAAII,MAAJ,CAAWC,QAAxB,CAAhB;AACA,QAAMC,WAAW,EAACD,UAAUL,IAAII,MAAJ,CAAWC;;AAEvC;AAFiB,KAAjB,CAGAf,IAAIiB,UAAJ,CAAgBX,gBAAgBC,OAAhB,CAAhB;;AAEAP,QAAIkB,KAAJ,CAAUT,OAAV,CAAkBO,QAAlB,EAA4B,UAACG,GAAD,EAAMC,IAAN,EAAc;AACtC,YAAMC,aAAarB,IAAIsB,gBAAJ,CAAqBN,QAArB,CAAnB;AACA;AACAK,mBAAWE,EAAX,CAAc,OAAd,EAAuB,UAACJ,GAAD;AAAA,mBAASR,IAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB9B,eAAK+B,YAA1B,CAAT;AAAA,SAAvB;AACA;AACAL,mBAAWM,IAAX,CAAgBhB,GAAhB;AAEH,KAPD;AASH,CAjBM;;AAmBP;AACA;AACA;AACA;;;AAIO,IAAMiB,4BAAS,SAATA,OAAS,CAAClB,GAAD,EAAKC,GAAL,EAAW;;AAE7BX,QAAIiB,UAAJ,CAAgB,QAAhB;AACA;;AAEA,QAAMY,YAAY,EAACC,UAAU,EAACC,OAAO,SAAR,EAAX,EAAlB;AACA/B,QAAIkB,KAAJ,CAAUc,IAAV,CAAeH,SAAf,EAA0BI,OAA1B,CAAmC,UAACd,GAAD,EAAMD,KAAN;AAAA,eAAiBP,IAAIuB,IAAJ,CAAShB,KAAT,CAAjB;AAAA,KAAnC;AAEH,CARM","file":"GridFsStream.js","sourcesContent":["import mongoose from 'mongoose'\nimport path from 'path'\nimport Grid from 'gridfs-stream'\n\nimport keys from './../keys'\n\n\nconst mlab = keys.USERS_DB\nconst conn = mongoose.createConnection(mlab)\nlet gfs\n\n\nconn.once('open', () => {\n    gfs = Grid(conn.db, mongoose.mongo)\n})\n\n// list of valid file extensions\nconst fileExtList = keys.FILE_EXT_LIST\n\n// check if valid file extension and fetch it on a dedicated bucket\nlet getExtForBucket =(fileExt)=> {\n  let bucket = fileExtList[fileExt]\n  return bucket ? bucket : \"uploads\"\n}\n\n\nexport const findOne =(req,res)=>{\n  \n    const fileExt = path.extname(req.params.filename)\n    const fileName = {filename: req.params.filename}\n\n    // select a bucket base on file extension\n    gfs.collection( getExtForBucket(fileExt) )\n    \n    gfs.files.findOne(fileName, (err, file) =>{\n        const readstream = gfs.createReadStream(fileName)\n        // return error msg\n        readstream.on('error', (err) => res.status(404).send(keys.FILE_ERR_MSG))\n        // return file\n        readstream.pipe(res)\n\n    })\n\n}\n\n// gfs.files.find({ filename: 'myImage.png' }).toArray(function (err, files) {\n//     if (err) ...\n//     console.log(files);\n//   })\n \n \n\nexport const findAll =(req,res)=>{\n    \n    gfs.collection( \"images\")\n    // gfs.collection( \"fileType\")\n  \n    const fileOwner = {metadata: {owner: \"ownerId\"}}\n    gfs.files.find(fileOwner).toArray( (err, files) =>  res.json(files) )\n\n}\n\n\n\n \n\n "]}