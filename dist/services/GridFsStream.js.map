{"version":3,"sources":["../../src/services/GridFsStream.js"],"names":["PaginationService","mlab","keys","USERS_DB","conn","mongoose","createConnection","gfs","once","db","mongo","fileExtList","FILE_EXT_LIST","getExtForBucket","fileExt","bucket","findOne","req","res","fileName","filename","params","collection","cbFindFile","err","file","readstream","createReadStream","on","status","send","FILE_ERR_MSG","pipe","files","findAllFilesByOwner","page","query","limit","tag","owner_id","id","fileOwner","RegExp","json","paginate","find","toArray","deactivateFile","config","queryString","validQueryString","UPDATE_METADATA","validatingQueryString","then","deactivatingFile","x","catch","data","Promise","resolve","reject","cbDeactivateFile","updated","message","update","$set","updateSharedUser","body","sharedUser","updatingSharedUser","cbUpdateSharedUser","msg","forEach","_","isEmpty","findAll","image_tag"],"mappings":"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","file":"GridFsStream.js","sourcesContent":["import mongoose from 'mongoose'\nimport path from 'path'\nimport Grid from 'gridfs-stream'\nimport * as PaginationService from './Pagination'\nimport _ from 'lodash'\nimport keys from './../keys'\nimport { BADSTR } from 'dns';\nimport { copyFile } from 'fs';\n\n\nconst mlab = keys.USERS_DB\nconst conn = mongoose.createConnection(mlab)\nlet gfs\n\n\nconn.once('open', () => {\n    gfs = Grid(conn.db, mongoose.mongo)\n})\n\n// list of valid file extensions\nconst fileExtList = keys.FILE_EXT_LIST\n\n// check if valid file extension and fetch it on a dedicated bucket\nlet getExtForBucket =(fileExt)=> {\n  let bucket = fileExtList[fileExt]\n  return bucket ? bucket : \"uploads\"\n}\n\n\nexport const findOne=(bucket)=>{\n  \n   return (req,res)=>{\n  \n        const fileName = {filename: req.params.filename}\n    \n        gfs.collection( bucket )\n        \n        const cbFindFile = (err, file) =>{\n            const readstream = gfs.createReadStream(fileName)\n            // return error msg\n            // readstream.on('error', (err) => res.status(404).send(keys.FILE_ERR_MSG))\n            readstream.on('error', (err) => res.status(404).send(keys.FILE_ERR_MSG))\n            // return file\n            readstream.pipe(res)\n        }\n\n        gfs.files.findOne(fileName, cbFindFile)\n   }\n}\n\n// export const findOne =(req,res,bucket)=>{\n  \n//     const fileExt = path.extname(req.params.filename)\n//     const bucketName = bucket\n//     const fileName = {filename: req.params.filename}\n\n//     // select a bucket base on file extension\n//     gfs.collection( bucketName )\n    \n//     gfs.files.findOne(fileName, (err, file) =>{\n//         const readstream = gfs.createReadStream(fileName)\n//         // return error msg\n//         readstream.on('error', (err) => res.status(404).send(keys.FILE_ERR_MSG))\n//         // return file\n//         readstream.pipe(res)\n\n//     })\n\n// }\n\n// gfs.files.find({ filename: 'myImage.png' }).toArray(function (err, files) {\n//     if (err) ...\n//     console.log(files);\n//   })\n \n\nexport const findAllFilesByOwner =(req,res)=>{\n    const page = req.query.page\n    const limit = req.query.limit\n    const bucket = req.query.bucket\n    const tag = req.query.tag\n    const owner_id = req.query.id\n\n    gfs.collection( bucket )\n\n    const fileOwner = {\n        'metadata.owner': owner_id , \n        'metadata.tag': new RegExp( tag, 'i') ,\n        'metadata.isDeleted': false\n    }\n\n    const cbFindFile =(err, files)=>  {\n        err ? res.status(400).send(err) :\n        res.json( PaginationService.paginate(files, page, limit) )\n    }\n\n    gfs.files.find(fileOwner).toArray(cbFindFile)\n\n}\n\n\n\nexport const deactivateFile =(req,res)=>{\n\n    const config = {\n        queryString: req.query,\n        validQueryString : ['bucket', 'filename'],\n        UPDATE_METADATA: {\n            'metadata.isDeleted': true\n        }\n    }\n\n    validatingQueryString(config)\n        .then(x => deactivatingFile(x) )\n        .then(x => res.status(200).send(x) )\n        .catch( err => res.status(400).send(err) )\n\n\n\n    //PROMISE\n    const deactivatingFile =(data)=>{\n        return new Promise( (resolve, reject) =>{\n\n            gfs.collection( data.queryString.bucket )\n\n            const cbDeactivateFile = (err, updated) =>\n                err ? reject(\"error on updating metadata\") : resolve( {message:\"file deactivated\"} ) \n\n            gfs.files.update({ filename: data.queryString.filename}, { $set: data.UPDATE_METADATA }, cbDeactivateFile)\n        \n        })\n    }\n\n}\n\n\nexport const updateSharedUser =(req,res)=>{\n\n    const config = {\n        bucket : req.body.bucket,\n        filename : req.body.filename,\n        UPDATE_METADATA: {\n            'metadata.sharedUser': req.body.sharedUser\n        }\n    }\n\n    updatingSharedUser(config)\n        .then(x => res.status(200).send(x) )\n        .catch( err => res.status(400).send(err) )\n\n    //PROMISE\n    const updatingSharedUser =(data)=>{\n        return new Promise( (resolve, reject) =>{\n\n            gfs.collection( data.bucket )\n\n            const cbUpdateSharedUser = (err, updated) =>\n                err ? reject(\"error on updating metadata\") : resolve( {message:\"updated shared users\"} ) \n\n            gfs.files.update({ filename: data.filename}, { $set: data.UPDATE_METADATA }, cbUpdateSharedUser)\n        \n        })\n    }\n\n}\n\n \n\n//REUSABLE PROMISE\nlet validatingQueryString =(data)=> {\n\n    let msg = \"\" \n\n    return new Promise( (resolve, reject) =>{\n\n        data.validQueryString.forEach(x => {\n            if( x in data.queryString === false) msg = ` ${msg + x}, `\n        })\n\n        !_.isEmpty(msg) ? reject({\"error\": `missing query strings :${msg}`}) : resolve(data) \n    \n    })\n}\n\n\n\n\n\n \n\n\n// db.open()\n//     // !!!!!!!!!\n//     // !WARNING! THIS DROPS THE CURRENT DATABASE\n//     // !!!!!!!!!\n//     .then(() => db.dropDatabase())\n//     .then(() => {\n//         const gfs = Grid(db, mongo);\n\n//         // create my_file\n//         return new Promise((resolve, reject) => {\n//             gfs.createWriteStream({ filename: 'my_file.txt' })\n//                 .once('finish', resolve)\n//                 .once('error', reject)\n//                 .end('hello world');\n//         })\n//             // find my_file\n//             .then(() => gfs.files.findOne({ filename: 'my_file.txt'})\n//             .then(file => console.log('should find file:', !!file)))\n//             // rename my_file to my_renamed_file\n//             .then(() => gfs.files.update(\n//                 { filename: 'my_file.txt'},\n//                 { $set: { filename: 'my_renamed_file.txt' } }\n//             )\n//             .then(res => console.log('should have modified:', res.result.nModified === 1)))\n//             // should not find my_file\n//             .then(() => gfs.files.findOne({ filename: 'my_file.txt'})\n//             .then(file => console.log('should not find: ', !file)))\n//             // should find my_renamed_file\n//             .then(() => gfs.files.findOne({ filename: 'my_renamed_file.txt'})\n//             .then(file => console.log('should find renamed:', !!file)))\n//     })\n//     .catch(console.error);\n\n\n\nexport const findAll =(req,res)=>{\n    const page = req.query.page\n    const limit = req.query.limit\n    const bucket = req.query.bucket\n    const image_tag = req.query.tag\n    const owner_id = req.query.id\n\n    gfs.collection( bucket )\n    // gfs.collection( \"fileType\")\n  \n    // const fileOwner = {\n    //     metadata: {\n    //         owner: \"5b61c8a8d0902c000414ccd6\", req.headers.owner_id\n    //         image_tag: \"weee\"\n    //     }\n    // }\n\n    const fileOwner = {\n        'metadata.owner': owner_id , \n        'metadata.image_tag': new RegExp( image_tag, 'i') ,\n        'metadata.isDeleted': false\n    }\n\n    const cbFindFile =(err, files)=>  {\n        err ? res.status(400).send(err) :\n        res.json( PaginationService.paginate(files, page, limit) )\n    }\n\n    // {\n    //     'metadata.section': 'my-blog'\n    //     'metadata.published': { '$lt': datetime.utcnow() } }\n\n    gfs.files.find(fileOwner).toArray(cbFindFile)\n \n}\n\n\n\n \n\n //findByUser\n //header file_type\n //header user?"]}