{"version":3,"sources":["../../src/services/GridFsStream.js"],"names":["PaginationService","mlab","keys","USERS_DB","conn","mongoose","createConnection","gfs","once","db","mongo","fileExtList","FILE_EXT_LIST","getExtForBucket","fileExt","bucket","findOne","req","res","fileName","filename","params","collection","cbFindFile","err","file","readstream","createReadStream","on","status","send","FILE_ERR_MSG","pipe","files","findAllFilesByOwner","page","query","limit","tag","name","owner_id","id","fileOwner","RegExp","json","paginate","find","toArray","findAllSharedFilesByUserId","sharedUser_id","$elemMatch","deactivateFile","config","queryString","validQueryString","UPDATE_METADATA","validatingQueryString","then","deactivatingFile","x","catch","data","Promise","resolve","reject","cbDeactivateFile","updated","message","update","$set","updateFile","updatingFile","cbUpdateFile","body","sharedUser","msg","forEach","_","isEmpty","findAll","image_tag"],"mappings":"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","file":"GridFsStream.js","sourcesContent":["import mongoose from 'mongoose'\nimport path from 'path'\nimport Grid from 'gridfs-stream'\nimport * as PaginationService from './Pagination'\nimport _ from 'lodash'\nimport keys from './../keys'\nimport {\n    BADSTR\n} from 'dns';\nimport {\n    copyFile\n} from 'fs';\n\n\nconst mlab = keys.USERS_DB\nconst conn = mongoose.createConnection(mlab)\nlet gfs\n\n\nconn.once('open', () => {\n    gfs = Grid(conn.db, mongoose.mongo)\n})\n\n// list of valid file extensions\nconst fileExtList = keys.FILE_EXT_LIST\n\n// check if valid file extension and fetch it on a dedicated bucket\nlet getExtForBucket = (fileExt) => {\n    let bucket = fileExtList[fileExt]\n    return bucket ? bucket : \"uploads\"\n}\n\n\nexport const findOne = (bucket) => {\n\n    return (req, res) => {\n\n        const fileName = {\n            filename: req.params.filename\n        }\n\n        gfs.collection(bucket)\n\n        const cbFindFile = (err, file) => {\n            const readstream = gfs.createReadStream(fileName)\n            // return error msg\n            // readstream.on('error', (err) => res.status(404).send(keys.FILE_ERR_MSG))\n            readstream.on('error', (err) => res.status(404).send(keys.FILE_ERR_MSG))\n            // return file\n            readstream.pipe(res)\n        }\n\n        gfs.files.findOne(fileName, cbFindFile)\n    }\n}\n\n// export const findOne =(req,res,bucket)=>{\n\n//     const fileExt = path.extname(req.params.filename)\n//     const bucketName = bucket\n//     const fileName = {filename: req.params.filename}\n\n//     // select a bucket base on file extension\n//     gfs.collection( bucketName )\n\n//     gfs.files.findOne(fileName, (err, file) =>{\n//         const readstream = gfs.createReadStream(fileName)\n//         // return error msg\n//         readstream.on('error', (err) => res.status(404).send(keys.FILE_ERR_MSG))\n//         // return file\n//         readstream.pipe(res)\n\n//     })\n\n// }\n\n// gfs.files.find({ filename: 'myImage.png' }).toArray(function (err, files) {\n//     if (err) ...\n//     console.log(files);\n//   })\n\n\nexport const findAllFilesByOwner = (req, res) => {\n    const page = req.query.page\n    const limit = req.query.limit\n    const bucket = req.query.bucket\n    const tag = req.query.tag\n    const name = req.query.name\n    const owner_id = req.query.id\n\n    gfs.collection(bucket)\n\n    const fileOwner = {\n        'metadata.owner': owner_id,\n        'metadata.name': new RegExp(name, 'i'),\n        'metadata.tag': new RegExp(tag, 'i'),\n        'metadata.isDeleted': false\n    }\n\n    const cbFindFile = (err, files) => {\n        err ? res.status(400).send(err) :\n            res.json(PaginationService.paginate(files, page, limit))\n    }\n\n    gfs.files.find(fileOwner).toArray(cbFindFile)\n\n}\n\n\nexport const findAllSharedFilesByUserId = (req, res) => {\n    const page = req.query.page\n    const limit = req.query.limit\n    const bucket = req.query.bucket\n    const tag = req.query.tag\n    const name = req.query.name\n    const sharedUser_id = req.query.id\n    gfs.collection(bucket)\n\n    const fileOwner = {\n        'metadata.tag': new RegExp(tag, 'i'),\n        'metadata.name': new RegExp(name, 'i'),\n        'metadata.sharedUser': { \n             $elemMatch:{\n                //any record on arrays of object containing the id will be displayed\n                id : sharedUser_id\n            }\n        },\n             \n        'metadata.isDeleted': false\n    }\n\n\n    const cbFindFile = (err, files) => {\n        err ? res.status(400).send(err) :\n            res.json(PaginationService.paginate(files, page, limit))\n    }\n\n    gfs.files.find(fileOwner).toArray(cbFindFile)\n\n}\n\n\n\n\n\n\nexport const deactivateFile = (req, res) => {\n\n    const config = {\n        queryString: req.query,\n        validQueryString: ['bucket', 'filename'],\n        UPDATE_METADATA: {\n            'metadata.isDeleted': true\n        }\n    }\n\n    validatingQueryString(config)\n        .then(x => deactivatingFile(x))\n        .then(x => res.status(200).send(x))\n        .catch(err => res.status(400).send(err))\n\n\n\n    //PROMISE\n    const deactivatingFile = (data) => {\n        return new Promise((resolve, reject) => {\n\n            gfs.collection(data.queryString.bucket)\n\n            const cbDeactivateFile = (err, updated) =>\n                err ? reject(\"error on updating metadata\") : resolve({\n                    message: \"file deactivated\"\n                })\n\n            gfs.files.update({\n                filename: data.queryString.filename\n            }, {\n                $set: data.UPDATE_METADATA\n            }, cbDeactivateFile)\n\n        })\n    }\n\n}\n\n\nexport const updateFile = (req, res) => {\n    //PROMISE\n    const updatingFile = (data) => {\n        return new Promise((resolve, reject) => {\n\n            gfs.collection(data.bucket)\n\n            const cbUpdateFile = (err, updated) =>\n                err ? reject(\"error on updating metadata\") : resolve({\n                    message: \"updated shared users\"\n                })\n \n            gfs.files.update({\n                filename: data.filename\n            }, {\n                $set: data.UPDATE_METADATA\n            }, cbUpdateFile)\n\n        })\n    }\n\n    const config = {\n        bucket: req.body.bucket,\n        filename: req.body.filename,\n        UPDATE_METADATA: {\n            'metadata.sharedUser': req.body.sharedUser,\n            'metadata.name': req.body.name,\n            'metadata.tag': req.body.tag\n        }\n    }\n\n    return updatingFile(config)\n        .then(x => res.status(200).send(x))\n        .catch(err => res.status(400).send(err))\n\n}\n\n\n\n//REUSABLE PROMISE\nlet validatingQueryString = (data) => {\n\n    let msg = \"\"\n\n    return new Promise((resolve, reject) => {\n\n        data.validQueryString.forEach(x => {\n                if (x in data.queryString === false) msg = ` ${msg + x}, `\n            })\n\n            !_.isEmpty(msg) ? reject({\n                \"error\": `missing query strings :${msg}`\n            }) : resolve(data)\n\n    })\n}\n\n\n\n\n\n\n\n\n// db.open()\n//     // !!!!!!!!!\n//     // !WARNING! THIS DROPS THE CURRENT DATABASE\n//     // !!!!!!!!!\n//     .then(() => db.dropDatabase())\n//     .then(() => {\n//         const gfs = Grid(db, mongo);\n\n//         // create my_file\n//         return new Promise((resolve, reject) => {\n//             gfs.createWriteStream({ filename: 'my_file.txt' })\n//                 .once('finish', resolve)\n//                 .once('error', reject)\n//                 .end('hello world');\n//         })\n//             // find my_file\n//             .then(() => gfs.files.findOne({ filename: 'my_file.txt'})\n//             .then(file => console.log('should find file:', !!file)))\n//             // rename my_file to my_renamed_file\n//             .then(() => gfs.files.update(\n//                 { filename: 'my_file.txt'},\n//                 { $set: { filename: 'my_renamed_file.txt' } }\n//             )\n//             .then(res => console.log('should have modified:', res.result.nModified === 1)))\n//             // should not find my_file\n//             .then(() => gfs.files.findOne({ filename: 'my_file.txt'})\n//             .then(file => console.log('should not find: ', !file)))\n//             // should find my_renamed_file\n//             .then(() => gfs.files.findOne({ filename: 'my_renamed_file.txt'})\n//             .then(file => console.log('should find renamed:', !!file)))\n//     })\n//     .catch(console.error);\n\n\n\nexport const findAll = (req, res) => {\n    const page = req.query.page\n    const limit = req.query.limit\n    const bucket = req.query.bucket\n    const image_tag = req.query.tag\n    const owner_id = req.query.id\n\n    gfs.collection(bucket)\n    // gfs.collection( \"fileType\")\n\n    // const fileOwner = {\n    //     metadata: {\n    //         owner: \"5b61c8a8d0902c000414ccd6\", req.headers.owner_id\n    //         image_tag: \"weee\"\n    //     }\n    // }\n\n    const fileOwner = {\n        'metadata.owner': owner_id,\n        'metadata.image_tag': new RegExp(image_tag, 'i'),\n        'metadata.isDeleted': false\n    }\n\n    const cbFindFile = (err, files) => {\n        err ? res.status(400).send(err) :\n            res.json(PaginationService.paginate(files, page, limit))\n    }\n\n    // {\n    //     'metadata.section': 'my-blog'\n    //     'metadata.published': { '$lt': datetime.utcnow() } }\n\n    gfs.files.find(fileOwner).toArray(cbFindFile)\n\n}\n\n\n\n\n\n//findByUser\n//header file_type\n//header user?"]}