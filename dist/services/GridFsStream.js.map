{"version":3,"sources":["../../src/services/GridFsStream.js"],"names":["PaginationService","mlab","keys","USERS_DB","conn","mongoose","createConnection","gfs","once","db","mongo","fileExtList","FILE_EXT_LIST","getExtForBucket","fileExt","bucket","findOne","req","res","fileName","filename","params","collection","cbFindFile","err","file","readstream","createReadStream","on","status","send","FILE_ERR_MSG","pipe","files","findAllFilesByOwner","page","query","limit","image_tag","tag","headers","fileOwner","metadata","owner","owner_id","json","paginate","find","toArray","findAll","RegExp"],"mappings":"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","file":"GridFsStream.js","sourcesContent":["import mongoose from 'mongoose'\nimport path from 'path'\nimport Grid from 'gridfs-stream'\nimport * as PaginationService from './Pagination'\n\nimport keys from './../keys'\n\n\nconst mlab = keys.USERS_DB\nconst conn = mongoose.createConnection(mlab)\nlet gfs\n\n\nconn.once('open', () => {\n    gfs = Grid(conn.db, mongoose.mongo)\n})\n\n// list of valid file extensions\nconst fileExtList = keys.FILE_EXT_LIST\n\n// check if valid file extension and fetch it on a dedicated bucket\nlet getExtForBucket =(fileExt)=> {\n  let bucket = fileExtList[fileExt]\n  return bucket ? bucket : \"uploads\"\n}\n\n\nexport const findOne=(bucket)=>{\n  \n   return (req,res)=>{\n  \n        const fileName = {filename: req.params.filename}\n    \n        gfs.collection( bucket )\n        \n        const cbFindFile = (err, file) =>{\n            const readstream = gfs.createReadStream(fileName)\n            // return error msg\n            // readstream.on('error', (err) => res.status(404).send(keys.FILE_ERR_MSG))\n            readstream.on('error', (err) => res.status(404).send(keys.FILE_ERR_MSG))\n            // return file\n            readstream.pipe(res)\n        }\n\n        gfs.files.findOne(fileName, cbFindFile)\n   }\n}\n\n// export const findOne =(req,res,bucket)=>{\n  \n//     const fileExt = path.extname(req.params.filename)\n//     const bucketName = bucket\n//     const fileName = {filename: req.params.filename}\n\n//     // select a bucket base on file extension\n//     gfs.collection( bucketName )\n    \n//     gfs.files.findOne(fileName, (err, file) =>{\n//         const readstream = gfs.createReadStream(fileName)\n//         // return error msg\n//         readstream.on('error', (err) => res.status(404).send(keys.FILE_ERR_MSG))\n//         // return file\n//         readstream.pipe(res)\n\n//     })\n\n// }\n\n// gfs.files.find({ filename: 'myImage.png' }).toArray(function (err, files) {\n//     if (err) ...\n//     console.log(files);\n//   })\n \n\nexport const findAllFilesByOwner =(req,res)=>{\n    const page = req.query.page\n    const limit = req.query.limit\n    const image_tag = req.query.tag\n    const bucket = req.headers.bucket\n\n    const fileOwner = {\n         metadata: {\n             owner: req.headers.owner_id,\n            } \n        }\n\n    // choose a bucket to search files\n    gfs.collection( bucket )\n    \n\n    const cbFindFile =(err, files)=>  {\n        err ? res.status(400).send(err) :\n        res.json( PaginationService.paginate(files, page, limit) )\n    }\n\n    gfs.files.find(fileOwner).toArray(cbFindFile)\n\n}\n\n\n\nexport const findAll =(req,res)=>{\n    const page = req.query.page\n    const limit = req.query.limit\n    // const file_type = req.headers.file_type\n\n    gfs.collection( \"image\" )\n    // gfs.collection( \"fileType\")\n  \n    // const fileOwner = {\n    //     metadata: {\n    //         owner: \"5b61c8a8d0902c000414ccd6\", req.headers.owner_id\n    //         image_tag: \"weee\"\n    //     }\n    // }\n\n    const fileOwner = {\n        'metadata.owner': req.headers.owner_id , \n        'metadata.image_tag': new RegExp( req.headers.tag, 'i') \n    }\n\n    const cbFindFile =(err, files)=>  {\n        err ? res.status(400).send(err) :\n        res.json( PaginationService.paginate(files, page, limit) )\n    }\n\n    // {\n    //     'metadata.section': 'my-blog'\n    //     'metadata.published': { '$lt': datetime.utcnow() } }\n\n    gfs.files.find(fileOwner).toArray(cbFindFile)\n \n}\n\n\n\n \n\n //findByUser\n //header file_type\n //header user?"]}