{"version":3,"sources":["../../src/services/GridFsStorage.js"],"names":["mlab","keys","USERS_DB","bucketList","BUCKET_LIST","getBucket","fileType","bucket","storage","GridFsStorage","url","file","req","Promise","resolve","reject","crypto","randomBytes","err","buf","filename","toString","path","extname","originalname","fileInfo","metadata","owner","bucketName","mimetype","upload"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA,IAAMA,OAAOC,eAAKC,QAAlB;;AAEA,IAAMC,aAAaF,eAAKG,WAAxB;;AAEA;AACA,IAAMC,YAAW,SAAXA,SAAW,CAACC,QAAD,EAAa;AAC5B,MAAIC,SAASJ,WAAWG,QAAX,CAAb;AACA,SAAOC,SAASA,MAAT,GAAkB,SAAzB;AACD,CAHD;;AAKA;AACA,IAAMC,UAAU,IAAIC,6BAAJ,CAAkB;;AAE9BC,OAAKV,IAFyB;;AAI9BW,QAAM,cAACC,GAAD,EAAMD,KAAN,EAAe;;AAEnB,WAAO,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEtC;AACAC,uBAAOC,WAAP,CAAmB,EAAnB,EAAuB,UAACC,GAAD,EAAMC,GAAN,EAAc;;AAEjC,YAAID,GAAJ,EAAS;AAAE,iBAAOH,OAAOG,GAAP,CAAP;AAAoB;;AAG/B,YAAME,WAAWD,IAAIE,QAAJ,CAAa,KAAb,IAAsBC,eAAKC,OAAL,CAAaZ,MAAKa,YAAlB,CAAvC;AACA,YAAMC,WAAW;AACbL,oBAAUA,QADG;AAEbM,oBAAU;AACRC,mBAAO;AADC,WAFG;AAKbC,sBAAYvB,UAAUM,MAAKkB,QAAf;AALC,SAAjB;;AAQAf,gBAAQW,QAAR;AACH,OAfD;AAgBD,KAnBM,CAAP;AAoBD;AA1B6B,CAAlB,CAAhB;;AA6BO,IAAMK,0BAAS,sBAAQ,EAACtB,gBAAD,EAAR,CAAf","file":"GridFsStorage.js","sourcesContent":["import path from 'path'\nimport crypto from 'crypto'\nimport mongoose from 'mongoose'\nimport multer from 'multer'\nimport GridFsStorage from 'multer-gridfs-storage'\n\nimport keys from './../keys'\n\nconst mlab = keys.USERS_DB\n \nconst bucketList = keys.BUCKET_LIST\n\n// check the file extension and the bucket for it\nconst getBucket =(fileType)=> {\n  let bucket = bucketList[fileType]\n  return bucket ? bucket : \"uploads\"\n}\n\n// stores the file to a specific bucket from the bucketlist\nconst storage = new GridFsStorage({\n\n    url: mlab,\n\n    file: (req, file) => {\n      \n      return new Promise((resolve, reject) => {\n        \n        // create unique filename\n        crypto.randomBytes(16, (err, buf) => {\n          \n            if (err) { return reject(err) }\n\n          \n            const filename = buf.toString('hex') + path.extname(file.originalname)\n            const fileInfo = {\n                filename: filename,\n                metadata: {\n                  owner: \"ownerId\"\n                },\n                bucketName: getBucket(file.mimetype)\n            }\n\n            resolve(fileInfo)\n        })\n      })\n    }\n})\n\nexport const upload = multer( {storage} )\n"]}