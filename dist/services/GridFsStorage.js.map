{"version":3,"sources":["../../src/services/GridFsStorage.js"],"names":["mlab","keys","USERS_DB","storage","GridFsStorage","url","file","req","bucketName","headers","bucket","ownerId","owner_id","Promise","resolve","reject","crypto","randomBytes","err","buf","filename","toString","path","extname","originalname","fileInfo","metadata","owner","image_tag","body","isDeleted","upload"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA,IAAMA,OAAOC,eAAKC,QAAlB;;AAMA;AACA,IAAMC,UAAU,IAAIC,6BAAJ,CAAkB;;AAE9BC,OAAKL,IAFyB;;AAI9BM,QAAM,cAACC,GAAD,EAAMD,KAAN,EAAe;;AAEnB,QAAIE,aAAaD,IAAIE,OAAJ,CAAYC,MAA7B;AACA,QAAIC,UAAUJ,IAAIE,OAAJ,CAAYG,QAA1B;;AAIA,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEtC;AACAC,uBAAOC,WAAP,CAAmB,EAAnB,EAAuB,UAACC,GAAD,EAAMC,GAAN,EAAc;;AAEjC,YAAID,GAAJ,EAAS;AAAE,iBAAOH,OAAOG,GAAP,CAAP;AAAoB;;AAG/B,YAAME,WAAWD,IAAIE,QAAJ,CAAa,KAAb,IAAsBC,eAAKC,OAAL,CAAajB,MAAKkB,YAAlB,CAAvC;AACA,YAAMC,WAAW;AACbL,oBAAUA,QADG;AAEbM,oBAAU;AACRC,mBAAOhB,OADC;AAERiB,uBAAWrB,IAAIsB,IAAJ,CAASD,SAFZ;AAGRE,uBAAW;AAHH,WAFG;AAObtB,sBAAYA;AAPC,SAAjB;;AAUAM,gBAAQW,QAAR;AACH,OAjBD;AAkBD,KArBM,CAAP;AAsBD;AAjC6B,CAAlB,CAAhB;;AAoCO,IAAMM,0BAAS,sBAAQ,EAAC5B,gBAAD,EAAR,CAAf","file":"GridFsStorage.js","sourcesContent":["import path from 'path'\nimport crypto from 'crypto'\nimport mongoose from 'mongoose'\nimport multer from 'multer'\nimport GridFsStorage from 'multer-gridfs-storage'\n\nimport keys from './../keys'\n\nconst mlab = keys.USERS_DB\n \n\n\n\n \n// stores the file to a specific bucket from the bucketlist\nconst storage = new GridFsStorage({\n\n    url: mlab,\n\n    file: (req, file) => {\n      \n      let bucketName = req.headers.bucket\n      let ownerId = req.headers.owner_id\n  \n      \n \n      return new Promise((resolve, reject) => {\n        \n        // create unique filename\n        crypto.randomBytes(16, (err, buf) => {\n          \n            if (err) { return reject(err) }\n\n          \n            const filename = buf.toString('hex') + path.extname(file.originalname)\n            const fileInfo = {\n                filename: filename,\n                metadata: {\n                  owner: ownerId,\n                  image_tag: req.body.image_tag,\n                  isDeleted: false\n                },\n                bucketName: bucketName\n            }\n\n            resolve(fileInfo)\n        })\n      })\n    }\n})\n\nexport const upload = multer( {storage} )\n"]}